{"ast":null,"code":"/*!\n * Bootstrap-Dark-5 v1.1.3 (https://vinorodrigues.github.io/bootstrap-dark-5/)\n * Copyright 2021 Vino Rodrigues\n * Licensed under MIT (https://github.com/vinorodrigues/bootstrap-dark-5/blob/main/LICENSE.md)\n */\n\n\"use strict\";\n\nclass DarkMode {\n  constructor() {\n    this._hasGDPRConsent = false;\n    this.cookieExpiry = 365;\n    if (document.readyState === 'loading') {\n      document.addEventListener(\"DOMContentLoaded\", function () {\n        DarkMode.onDOMContentLoaded();\n      });\n    } else {\n      DarkMode.onDOMContentLoaded();\n    }\n  }\n  get inDarkMode() {\n    return DarkMode.getColorScheme() == DarkMode.VALUE_DARK;\n  }\n  set inDarkMode(val) {\n    this.setDarkMode(val, false);\n  }\n  get hasGDPRConsent() {\n    return this._hasGDPRConsent;\n  }\n  set hasGDPRConsent(val) {\n    this._hasGDPRConsent = val;\n    if (val) {\n      const prior = DarkMode.readCookie(DarkMode.DATA_KEY);\n      if (prior) {\n        DarkMode.saveCookie(DarkMode.DATA_KEY, \"\", -1);\n        localStorage.setItem(DarkMode.DATA_KEY, prior);\n      }\n    } else {\n      const prior = localStorage.getItem(DarkMode.DATA_KEY);\n      if (prior) {\n        localStorage.removeItem(DarkMode.DATA_KEY);\n        DarkMode.saveCookie(DarkMode.DATA_KEY, prior);\n      }\n    }\n  }\n  get documentRoot() {\n    return document.getElementsByTagName(\"html\")[0];\n  }\n  static saveCookie(name, value = \"\", days = 365) {\n    let exp = \"\";\n    if (days) {\n      const date = new Date();\n      date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);\n      exp = \"; expires=\" + date.toUTCString();\n    }\n    document.cookie = name + \"=\" + value + exp + \"; SameSite=Strict; path=/\";\n  }\n  saveValue(name, value, days = this.cookieExpiry) {\n    if (this.hasGDPRConsent) {\n      DarkMode.saveCookie(name, value, days);\n    } else {\n      localStorage.setItem(name, value);\n    }\n    return;\n  }\n  static readCookie(name) {\n    const n = name + \"=\";\n    const parts = document.cookie.split(\";\");\n    for (let i = 0; i < parts.length; i++) {\n      const part = parts[i].trim();\n      if (part.startsWith(n)) {\n        return part.substring(n.length);\n      }\n    }\n    return \"\";\n  }\n  readValue(name) {\n    if (this.hasGDPRConsent) {\n      return DarkMode.readCookie(name);\n    } else {\n      const ret = localStorage.getItem(name);\n      return ret ? ret : \"\";\n    }\n  }\n  eraseValue(name) {\n    if (this.hasGDPRConsent) {\n      this.saveValue(name, \"\", -1);\n    } else {\n      localStorage.removeItem(name);\n    }\n  }\n  getSavedColorScheme() {\n    const val = this.readValue(DarkMode.DATA_KEY);\n    return val ? val : \"\";\n  }\n  getPreferedColorScheme() {\n    if (window.matchMedia && window.matchMedia(\"(prefers-color-scheme: dark)\").matches) {\n      return DarkMode.VALUE_DARK;\n    } else if (window.matchMedia && window.matchMedia(\"(prefers-color-scheme: light)\").matches) {\n      return DarkMode.VALUE_LIGHT;\n    } else {\n      return \"\";\n    }\n  }\n  setDarkMode(darkMode, doSave = true) {\n    const nodeList = document.querySelectorAll(\"[data-\" + DarkMode.DATA_SELECTOR + \"]\");\n    if (nodeList.length == 0) {\n      if (!darkMode) {\n        this.documentRoot.classList.remove(DarkMode.CLASS_NAME_DARK);\n        this.documentRoot.classList.add(DarkMode.CLASS_NAME_LIGHT);\n      } else {\n        this.documentRoot.classList.remove(DarkMode.CLASS_NAME_LIGHT);\n        this.documentRoot.classList.add(DarkMode.CLASS_NAME_DARK);\n      }\n    } else {\n      for (let i = 0; i < nodeList.length; i++) {\n        nodeList[i].setAttribute(\"data-\" + DarkMode.DATA_SELECTOR, darkMode ? DarkMode.VALUE_DARK : DarkMode.VALUE_LIGHT);\n      }\n    }\n    if (doSave) this.saveValue(DarkMode.DATA_KEY, darkMode ? DarkMode.VALUE_DARK : DarkMode.VALUE_LIGHT);\n  }\n  toggleDarkMode(doSave = true) {\n    let dm;\n    const node = document.querySelector(\"[data-\" + DarkMode.DATA_SELECTOR + \"]\");\n    if (!node) {\n      dm = this.documentRoot.classList.contains(DarkMode.CLASS_NAME_DARK);\n    } else {\n      dm = node.getAttribute(\"data-\" + DarkMode.DATA_SELECTOR) == DarkMode.VALUE_DARK;\n    }\n    this.setDarkMode(!dm, doSave);\n  }\n  resetDarkMode() {\n    this.eraseValue(DarkMode.DATA_KEY);\n    const dm = this.getPreferedColorScheme();\n    if (dm) {\n      this.setDarkMode(dm == DarkMode.VALUE_DARK, false);\n    } else {\n      const nodeList = document.querySelectorAll(\"[data-\" + DarkMode.DATA_SELECTOR + \"]\");\n      if (nodeList.length == 0) {\n        this.documentRoot.classList.remove(DarkMode.CLASS_NAME_LIGHT);\n        this.documentRoot.classList.remove(DarkMode.CLASS_NAME_DARK);\n      } else {\n        for (let i = 0; i < nodeList.length; i++) {\n          nodeList[i].setAttribute(\"data-\" + DarkMode.DATA_SELECTOR, \"\");\n        }\n      }\n    }\n  }\n  static getColorScheme() {\n    const node = document.querySelector(\"[data-\" + DarkMode.DATA_SELECTOR + \"]\");\n    if (!node) {\n      if (darkmode.documentRoot.classList.contains(DarkMode.CLASS_NAME_DARK)) {\n        return DarkMode.VALUE_DARK;\n      } else if (darkmode.documentRoot.classList.contains(DarkMode.CLASS_NAME_LIGHT)) {\n        return DarkMode.VALUE_LIGHT;\n      } else {\n        return \"\";\n      }\n    } else {\n      const data = node.getAttribute(\"data-\" + DarkMode.DATA_SELECTOR);\n      return data == DarkMode.VALUE_DARK || data == DarkMode.VALUE_LIGHT ? data : \"\";\n    }\n  }\n  static updatePreferedColorSchemeEvent() {\n    let dm = darkmode.getSavedColorScheme();\n    if (!dm) {\n      dm = darkmode.getPreferedColorScheme();\n      if (dm) darkmode.setDarkMode(dm == DarkMode.VALUE_DARK, false);\n    }\n  }\n  static onDOMContentLoaded() {\n    let pref = darkmode.readValue(DarkMode.DATA_KEY);\n    if (!pref) {\n      pref = DarkMode.getColorScheme();\n      if (!pref) {\n        pref = darkmode.getPreferedColorScheme();\n      }\n    }\n    const dm = pref == DarkMode.VALUE_DARK;\n    darkmode.setDarkMode(dm, false);\n    if (window.matchMedia) {\n      window.matchMedia(\"(prefers-color-scheme: dark)\").addEventListener(\"change\", function () {\n        DarkMode.updatePreferedColorSchemeEvent();\n      });\n    }\n  }\n}\nDarkMode.DATA_KEY = \"bs.prefers-color-scheme\";\nDarkMode.DATA_SELECTOR = \"bs-color-scheme\";\nDarkMode.VALUE_LIGHT = \"light\";\nDarkMode.VALUE_DARK = \"dark\";\nDarkMode.CLASS_NAME_LIGHT = \"light\";\nDarkMode.CLASS_NAME_DARK = \"dark\";\nconst darkmode = new DarkMode();","map":{"version":3,"names":["constructor","_hasGDPRConsent","cookieExpiry","document","readyState","addEventListener","DarkMode","onDOMContentLoaded","inDarkMode","getColorScheme","VALUE_DARK","val","setDarkMode","hasGDPRConsent","prior","readCookie","DATA_KEY","saveCookie","localStorage","setItem","getItem","removeItem","documentRoot","getElementsByTagName","name","value","days","exp","date","Date","setTime","getTime","toUTCString","cookie","saveValue","n","parts","split","i","length","part","trim","startsWith","substring","readValue","ret","eraseValue","getSavedColorScheme","getPreferedColorScheme","matchMedia","window","matches","VALUE_LIGHT","darkMode","doSave","querySelectorAll","DATA_SELECTOR","classList","remove","CLASS_NAME_DARK","add","CLASS_NAME_LIGHT","nodeList","setAttribute","toggleDarkMode","dm","node","querySelector","contains","getAttribute","resetDarkMode","darkmode","data","updatePreferedColorSchemeEvent","pref"],"sources":["C:\\Users\\Hp\\OneDrive\\Desktop\\FoodApp\\Mernapp\\frontend\\node_modules\\bootstrap-dark-5\\js\\src\\darkmode.ts"],"sourcesContent":["/**\r\n * *bootstrap-dark-5* `darkmode.js` -- the JavaScript module.\r\n *\r\n * ***class*** **DarkMode**\r\n *\r\n * Use this JS file, and its `darkmode` object, in your HTML to automatically capture `prefers-color-scheme` media query\r\n * events and also initialize tags with the `data-bs-color-scheme` attribute, or the document root (`<HTML>` tag) with the\r\n * user preferred color scheme.\r\n *\r\n * The `darkmode` object can also be used to drive a dark mode toggle event, with optional persistance\r\n * storage in either a cookie (if GDPR consent is given) or the browsers `localStorage` object.\r\n *\r\n * The module can be loaded into a html page using a standard script command.\r\n * ```html\r\n * <script src=\"darkmode.js\"></script>\r\n * ```\r\n *\r\n * This will create a variable `darkmode` that is an instance of the DarkMode class.\r\n *\r\n * Once the DOM is loaded the script will then look for any html tag with a `data-bs-color-scheme` attribute, and, if found\r\n * will use these tags to populate the current mode.  If this data attribute is not found then the script will use the document\r\n * root (`<HTML>` tag) with the class `dark` or `light`.\r\n *\r\n * For example, the `bootstrap-blackbox.css` variant requires the `<HTML>` to be initialized:\r\n *\r\n * ```html\r\n * <!doctype html>\r\n * <html lang=\"en\" data-bs-color-scheme>\r\n *   <head>\r\n *     <!-- ... -->\r\n * ```\r\n * You can also pre-initialize the mode by populating the data attribute:\r\n *\r\n * ```html\r\n * <html lang=\"en\" data-bs-color-scheme=\"dark\">\r\n * ```\r\n *\r\n * @module DarkMode\r\n * @_author Vino Rodrigues\r\n */\r\nclass DarkMode {\r\n  /** ***const*** -- Name of the cookie or localStorage->name when saving */\r\n  static readonly DATA_KEY = \"bs.prefers-color-scheme\"\r\n\r\n  //** ***const*** -- Data selector, when present in HTML will populate with `dark` or `light` as appropriate */\r\n  static readonly DATA_SELECTOR = \"bs-color-scheme\";\r\n\r\n  /** ***const*** -- String used to identify light mode *(do not change)*, @see https://www.w3.org/TR/mediaqueries-5/#prefers-color-scheme */\r\n  static readonly VALUE_LIGHT = \"light\"\r\n\r\n  /** ***const*** -- String used to identify dark mode *(do not change)*, @see https://www.w3.org/TR/mediaqueries-5/#prefers-color-scheme */\r\n  static readonly VALUE_DARK = \"dark\"\r\n\r\n  /** ***const*** -- String used to identify light mode as a class in the `<HTML>` tag */\r\n  static readonly CLASS_NAME_LIGHT = \"light\"\r\n\r\n  /** ***const*** -- String used to identify dark mode as a class in the `<HTML>` tag */\r\n  static readonly CLASS_NAME_DARK = \"dark\"\r\n\r\n  /**\r\n   * ***property***\r\n   *\r\n   * Used to get the current state, `true` when in dark mode, `false` when in light mode or when mode not set\r\n   *\r\n   * Can also be used to set the current mode *(with no persistance saving)*\r\n   *\r\n   * @example <caption>Get if page is in \"Dark\" mode</caption>\r\n   * var myVal = darkmode.inDarkMode;\r\n   *\r\n   * @example <caption>Set the page to the \"Dark\" mode</caption>\r\n   * darkmode.inDarkMode = true;\r\n   *\r\n   * @public\r\n   * @type {boolean}\r\n   */\r\n  get inDarkMode() {\r\n    return DarkMode.getColorScheme() == DarkMode.VALUE_DARK\r\n  }\r\n\r\n  set inDarkMode(val: boolean) {\r\n    this.setDarkMode(val, false)\r\n  }\r\n\r\n  /** @private */\r\n  private _hasGDPRConsent = false\r\n\r\n  /**\r\n   * Variable to store GDPR Consent.  This setting drives the persistance mechanism.\r\n   *\r\n   * Used in {@link #saveValue} to determine if a cookie or the `localStorage` object should be used.\r\n   * * Set to `true` when GDPR Consent has been given to enable storage to cookie *(useful in Server-Side knowledge of user preference)*\r\n   * * The setter takes care of swapping the cookie and localStorage if appropriate\r\n   * * Default is `false`, thus storage will use the browsers localStorage object *(Note: No expiry is set)*\r\n   *\r\n   * @example <caption>Set once GDPR consent is given by the user</caption>\r\n   * darkmode.hasGDPRConsent = true;\r\n   */\r\n  get hasGDPRConsent() {\r\n    return this._hasGDPRConsent\r\n  }\r\n\r\n  set hasGDPRConsent(val: boolean) {\r\n    this._hasGDPRConsent = val\r\n    if (val) {\r\n      // delete cookie if it exists\r\n      const prior = DarkMode.readCookie(DarkMode.DATA_KEY)\r\n      if (prior) {\r\n        DarkMode.saveCookie(DarkMode.DATA_KEY, \"\", -1)\r\n        localStorage.setItem(DarkMode.DATA_KEY, prior)\r\n      }\r\n    } else {\r\n      // delete localStorage if it exists\r\n      const prior = localStorage.getItem(DarkMode.DATA_KEY)\r\n      if (prior) {\r\n        localStorage.removeItem(DarkMode.DATA_KEY)\r\n        DarkMode.saveCookie(DarkMode.DATA_KEY, prior)\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Expiry time in days when saving and GDPR consent is give */\r\n  cookieExpiry = 365;\r\n\r\n  /**\r\n   * Saves the instance of the documentRoot (i.e. `<html>` tag) when the object is created.\r\n   */\r\n  get documentRoot(): HTMLHtmlElement {\r\n    return document.getElementsByTagName(\"html\")[0]\r\n  }\r\n\r\n  /**\r\n   * @constructor\r\n   * The constructor initializes the `darkmode` object (that should be used as a singleton).\r\n   */\r\n  constructor() {\r\n    if (document.readyState === 'loading') {\r\n      document.addEventListener(\"DOMContentLoaded\", function() {\r\n        DarkMode.onDOMContentLoaded()\r\n      })\r\n    } else {\r\n      DarkMode.onDOMContentLoaded()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Writes a cookie, assumes SameSite = Strict & path = /\r\n   *\r\n   * @private\r\n   * @param name -- Name of the cookie\r\n   * @param value -- Value to be saved\r\n   * @param days -- Number of days to expire the cookie\r\n   * @returns {void}\r\n   */\r\n  static saveCookie(name: string, value = \"\", days = 365): void {\r\n    let exp = \"\"\r\n    if (days) {\r\n      const date = new Date()\r\n      date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000))\r\n      exp = \"; expires=\" + date.toUTCString()\r\n    }\r\n    document.cookie = name + \"=\" + value + exp + \"; SameSite=Strict; path=/\"\r\n  }\r\n\r\n  /**\r\n   * Save the current color-scheme mode\r\n   *\r\n   * @param {string} name -- Name of the cookie or localStorage->name, is dependant on {@link #hasGDPRConsent}\r\n   * @param {string} value -- Should be one of `light` or `dark`\r\n   * @param {number} days -- Number of days to expire the cookie when the cookie is used, ignored for `localStorage`\r\n   * @returns {void}\r\n   */\r\n  private saveValue(name: string, value: string, days = this.cookieExpiry): void {\r\n    if (this.hasGDPRConsent) {\r\n      // use cookies\r\n      DarkMode.saveCookie(name, value, days)\r\n    } else {\r\n      // use local storage\r\n      localStorage.setItem(name, value)\r\n    }\r\n    return\r\n  }\r\n\r\n  /**\r\n   * Reads a cookie\r\n   * @private\r\n   */\r\n  static readCookie(name: string): string {\r\n    const n = name + \"=\"\r\n    const parts = document.cookie.split(\";\")\r\n\r\n    for(let i=0; i < parts.length; i++) {\r\n      const part = parts[i].trim()\r\n      if (part.startsWith(n)) {\r\n        // found it\r\n        return part.substring(n.length)\r\n      }\r\n    }\r\n    return \"\"\r\n  }\r\n\r\n  /**\r\n   * Retrieves the color-scheme last saved\r\n   *\r\n   * **NOTE:** is dependant on {@link #hasGDPRConsent}\r\n   *\r\n   * @param {string} name -- Name of the cookie or localStorage->name\r\n   * @returns {string} -- The saved value, either `light` or `dark`, or an empty string if not saved prior\r\n   */\r\n  readValue(name: string): string {\r\n    if (this.hasGDPRConsent) {\r\n      return DarkMode.readCookie(name)\r\n    } else {\r\n      const ret = localStorage.getItem(name)\r\n      return ret ? ret : \"\"\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deletes the saved color-scheme\r\n   *\r\n   * **NOTE:** is dependant on {@link #hasGDPRConsent}\r\n   *\r\n   * @param {string} name\r\n   * @returns {void} -- Nothing, erasure is assumed\r\n   */\r\n  eraseValue(name: string): void {\r\n    if (this.hasGDPRConsent) {\r\n      this.saveValue(name, \"\", -1)\r\n    } else {\r\n      localStorage.removeItem(name)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Queries the `<HTML>` tag for the current color-scheme\r\n   *\r\n   * *(This value is set prior via the {@link #setDarkMode}) function.)*\r\n   *\r\n   * @returns {string} -- The current value, either `light` or `dark`, or an empty string if not saved prior\r\n   */\r\n  getSavedColorScheme(): string {\r\n    const val = this.readValue(DarkMode.DATA_KEY)\r\n    return val ? val : \"\"\r\n  }\r\n\r\n  /**\r\n   * Queries the `prefers-color-scheme` media query for the current color-scheme\r\n   *\r\n   * *(This value is set prior via the {@link #setDarkMode}) function.)*\r\n   *\r\n   * @returns {string} -- The current value, either `light` or `dark`, or an empty string if the media query is not supported\r\n   */\r\n  getPreferedColorScheme(): string {\r\n    if (window.matchMedia && window.matchMedia(\"(prefers-color-scheme: dark)\").matches) {\r\n      return DarkMode.VALUE_DARK\r\n    } else if (window.matchMedia && window.matchMedia(\"(prefers-color-scheme: light)\").matches) {\r\n      return DarkMode.VALUE_LIGHT\r\n    } else {\r\n      return \"\"\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the color-scheme in the `<HTML>` tag as a class called either `light` or `dark`\r\n   *\r\n   * **Note:** This function will modify your document root element, i.e. the `<HTML>` tag\r\n   *\r\n   * Default behavior when setting dark mode `true`\r\n   *\r\n   * ```html\r\n   * <html lang=\"en\" class=\"other-classes dark\">\r\n   * <!-- Note: the \"light\" class is removed -->\r\n   * ```\r\n   *\r\n   * Default behavior when setting dark mode `false`\r\n   *\r\n   * ```html\r\n   * <html lang=\"en\" class=\"other-classes light\">\r\n   * <!-- Note: the \"dark\" class is removed -->\r\n   * ```\r\n   *\r\n   * Behavior when setting dark mode `true`, and `dataSelector = \"data-bs-color-scheme\"`\r\n   *\r\n   * ```html\r\n   * <html lang=\"en\" data-bs-color-scheme=\"dark\">\r\n   * ```\r\n   *\r\n   * Behavior when setting dark mode `false`, and `dataSelector = \"data-bs-color-scheme\"`\r\n   *\r\n   * ```html\r\n   * <html lang=\"en\" data-bs-color-scheme=\"light\">\r\n   * ```\r\n   *\r\n   * @example <caption>Set the color scheme to ***dark***, saving the state to the persistance mechanism</caption>\r\n   * document.querySelector(\"#darkmode-on-button\").onclick = function(e){\r\n   *   darkmode.setDarkMode(true);  // save=true is default\r\n   * }\r\n   *\r\n   * @example <caption>Set the color scheme to ***light***, but not saving the state</caption>\r\n   * document.querySelector(\"#darkmode-off-button-no-save\").onclick = function(e){\r\n   *   darkmode.setDarkMode(false, false);\r\n   * }\r\n   *\r\n   * @param {boolean} darkMode -- `true` for \"dark\", `false` for 'light'\r\n   * @param {boolean} doSave -- If `true`, then will also call {@link #saveValue} to save that state\r\n   * @returns {void} -- Nothing, assumes saved\r\n   */\r\n  setDarkMode(darkMode: boolean, doSave = true): void {\r\n    const nodeList = document.querySelectorAll(\"[data-\"+DarkMode.DATA_SELECTOR+\"]\")\r\n\r\n    if (nodeList.length == 0) {\r\n      if (!darkMode) {\r\n        // light\r\n        this.documentRoot.classList.remove(DarkMode.CLASS_NAME_DARK)\r\n        this.documentRoot.classList.add(DarkMode.CLASS_NAME_LIGHT)\r\n      } else {\r\n        // dark\r\n        this.documentRoot.classList.remove(DarkMode.CLASS_NAME_LIGHT)\r\n        this.documentRoot.classList.add(DarkMode.CLASS_NAME_DARK)\r\n      }\r\n    } else {\r\n      for (let i = 0; i < nodeList.length; i++) {\r\n        nodeList[i].setAttribute(\"data-\"+DarkMode.DATA_SELECTOR, darkMode ? DarkMode.VALUE_DARK : DarkMode.VALUE_LIGHT)\r\n      }\r\n    }\r\n\r\n    if (doSave) this.saveValue(DarkMode.DATA_KEY, darkMode ? DarkMode.VALUE_DARK : DarkMode.VALUE_LIGHT)\r\n  }\r\n\r\n  /**\r\n   * Toggles the color scheme in the `<HTML>` tag as a class called either `light` or `dark`\r\n   * based on the inverse of it's prior state.\r\n   *\r\n   * When {@link #dataSelector} is set, this is set in the given data selector as the data value.\r\n   *\r\n   * *(See {@link #setDarkMode})*\r\n   *\r\n   * @example <caption>Bind an UI Element `click` event to toggle dark mode</caption>\r\n   * document.querySelector(\"#darkmode-button\").onclick = function(e){\r\n   *   darkmode.toggleDarkMode();\r\n   * }\r\n   *\r\n   * @returns {void} - Nothing, assumes success\r\n   */\r\n  toggleDarkMode(doSave = true): void {\r\n    let dm\r\n    const node = document.querySelector(\"[data-\"+DarkMode.DATA_SELECTOR+\"]\")  // only get first one\r\n\r\n    if (!node) {\r\n      dm = this.documentRoot.classList.contains(DarkMode.CLASS_NAME_DARK)\r\n    } else {\r\n      dm = node.getAttribute(\"data-\"+DarkMode.DATA_SELECTOR) == DarkMode.VALUE_DARK\r\n    }\r\n    this.setDarkMode( !dm, doSave )\r\n  }\r\n\r\n  /**\r\n   * Clears the persistance state of the module and resets the document to the default mode.\r\n   *\r\n   * Calls {@link #eraseValue} to erase any saved value, and then\r\n   * calls {@link #getPreferedColorScheme} to retrieve the `prefers-color-scheme` media query,\r\n   * passing its value to {@link #setDarkMode} to reset the users preference.\r\n   *\r\n   * @example <caption>Bind a reset UI Element `click` event to reset the dark mode </caption>\r\n   * document.querySelector(\"#darkmode-forget\").onclick = function(e){\r\n   *   darkmode.resetDarkMode();\r\n   * }\r\n   *\r\n   * @returns {void} - Nothing, no error handling is performed.\r\n   */\r\n  resetDarkMode(): void {\r\n    this.eraseValue(DarkMode.DATA_KEY)\r\n    const dm = this.getPreferedColorScheme()\r\n    if (dm) {\r\n      this.setDarkMode( dm == DarkMode.VALUE_DARK, false )\r\n    } else {\r\n      // make good when `prefers-color-scheme` not supported\r\n      const nodeList = document.querySelectorAll(\"[data-\"+DarkMode.DATA_SELECTOR+\"]\")\r\n      if (nodeList.length == 0) {\r\n        this.documentRoot.classList.remove(DarkMode.CLASS_NAME_LIGHT)\r\n        this.documentRoot.classList.remove(DarkMode.CLASS_NAME_DARK)\r\n      } else {\r\n        for (let i = 0; i < nodeList.length; i++) {\r\n          nodeList[i].setAttribute(\"data-\"+DarkMode.DATA_SELECTOR, \"\")\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the current color-scheme from the document `<HTML>` tag\r\n   *\r\n   * @returns {string} -- The current value, either `light` or `dark`, or an empty string if not present\r\n   */\r\n  static getColorScheme(): string {\r\n    const node = document.querySelector(\"[data-\"+DarkMode.DATA_SELECTOR+\"]\")\r\n    if (!node) {\r\n      if (darkmode.documentRoot.classList.contains(DarkMode.CLASS_NAME_DARK)) {\r\n        return DarkMode.VALUE_DARK\r\n      } else if (darkmode.documentRoot.classList.contains(DarkMode.CLASS_NAME_LIGHT)) {\r\n        return DarkMode.VALUE_LIGHT\r\n      } else {\r\n        return \"\"\r\n      }\r\n    } else {\r\n      const data = node.getAttribute(\"data-\"+DarkMode.DATA_SELECTOR)\r\n      // exact match only\r\n      return ((data == DarkMode.VALUE_DARK) || (data == DarkMode.VALUE_LIGHT)) ? data : \"\"\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ***static*** -- function called by the media query on change event.\r\n   *\r\n   * First retrieves any persistent/saved value, and if present ignores the event, but\r\n   * if not set then triggers the {@link #setDarkMode} function to change the current mode.\r\n   *\r\n   * @returns {void} -- Nothing, assumes success\r\n   */\r\n  static updatePreferedColorSchemeEvent(): void {\r\n    let dm = darkmode.getSavedColorScheme()\r\n    if (!dm) {\r\n      dm = darkmode.getPreferedColorScheme()\r\n      if (dm) darkmode.setDarkMode( dm == DarkMode.VALUE_DARK, false )\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ***static*** -- function called when the DOM finishes loading.\r\n   *\r\n   * Does all the DarkMode initialization, including:\r\n   * * Loading any prior stored preference (GDPR consent is ***not*** assumed)\r\n   * * else, honoring any `<HTML>` tag `class=\"dark|light\"` that Server-Side may set\r\n   * * else, honoring the browser / OS `prefers-color-scheme` preference\r\n   * and setting the derived mode by calling {@link #setDarkMode}\r\n   *\r\n   * Followed by setting up the media query on change event\r\n   *\r\n   * ***Warning:*** This function is automatically called when loading this module.\r\n   *\r\n   * @returns {void}\r\n   */\r\n  static onDOMContentLoaded(): void {\r\n    let pref = darkmode.readValue(DarkMode.DATA_KEY)\r\n    if (!pref) {\r\n      // user has not set pref. so get from `<HTML>` tag in case developer has set pref.\r\n      pref = DarkMode.getColorScheme()\r\n      if (!pref) {\r\n        // when all else fails, get pref. from OS/browser\r\n        pref = darkmode.getPreferedColorScheme()\r\n      }\r\n    }\r\n    const dm = (pref == DarkMode.VALUE_DARK)\r\n\r\n    // initialize the `HTML` tag\r\n    darkmode.setDarkMode(dm, false)\r\n\r\n    // update every time it changes\r\n    if (window.matchMedia) {\r\n      window.matchMedia(\"(prefers-color-scheme: dark)\").addEventListener( \"change\", function() {\r\n        DarkMode.updatePreferedColorSchemeEvent()\r\n      })\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * ***const*** -- This is the global instance (object) of the DarkMode class.\r\n */\r\nconst darkmode = new DarkMode()\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}